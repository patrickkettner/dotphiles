#
# dotphiles : https://github.com/dotphiles/dotphiles
#
# Sets dotzsh options.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#   Ben O'Hara <bohara@gmail.com>
#

# Set the key mapping style to 'emacs' or 'vi'.
zstyle ':dotzsh:module:editor' keymap 'emacs'
zstyle ':dotzsh:module:editor' editor 'vi'

# Auto convert .... to ../..
zstyle ':dotzsh:module:editor' dot-expansion 'no'

# Set case-sensitivity for completion, history lookup, etc.
zstyle ':dotzsh:module:*' case-sensitive 'no'

# Color output (auto set to 'no' on dumb terminals).
zstyle ':dotzsh:module:*' color 'yes'

# Setup aliases for modules (disable per module below).
zstyle ':dotzsh:module:*' aliases 'yes'

# Auto set the tab and window titles.
zstyle ':dotzsh:module:terminal' auto-title 'yes'

zstyle ':dotzsh:module:ssh:agent' forwarding 'yes'
zstyle ':dotzsh:module:ssh:aliases' hosts 'yes'

zstyle ':dotzsh:module:syntax-highlighting' highlighters 'main' 'brackets' 'pattern' \
  'cursor' 'root' \

# Set the Zsh modules to load (man zshmodules).
zstyle ':dotzsh:load' zmodule 'stat'

# Set the Zsh functions to load (man zshcontrib).
zstyle ':dotzsh:load' zfunction 'zargs' 'zmv'

#auto start tmux
zstyle ':dotzsh:module:tmux' auto-start 'yes'


# Set the dotzsh modules to load (browse modules).
# The order matters.
zstyle ':dotzsh:load' dzmodule \
  'environment' \
  'terminal' \
  'editor' \
  'history' \
  'utility' \
  'tmux' \
  'completion'

# Set the theme to load.
# Setting it to 'random' loads a random theme.
# Auto set to 'off' on dumb terminals.
#zstyle ':dotzsh:module:theme' theme 'dotphiles'
# Set custom scheme based on hostname or domain
#zstyle ':dotzsh:module:theme:host:hostname' theme 'dotphiles' 'soldark' 'yellow'
#zstyle ':dotzsh:module:theme:host:hostname2.example2.com' theme 'dotphiles' 'soldark' 'violet'
#zstyle ':dotzsh:module:theme:domain:example.net' theme 'dotphiles' 'soldark' 'red'

# Load dotzsh
source "$HOME/.dotfiles/zsh/dotzsh/init.zsh"

#------------------------------

ZSH=$HOME/.oh-my-zsh
ZSH_THEME="robbyrussell"


export EDITOR=`which vim`

export PATH=$HOME/.launchd.conf:$HOME/local/bin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/usr/X11/bin:/usr/local/bin:/usr/local/sbin:/bin:/usr/local/Cellar/coreutils/8.19/libexec/gnubin

#enable plugins via oh-my-zsh
plugins=(svn git vundle brew osx gem npm github zsh-history-substring-search zsh-syntax-highlighting mercurial)


alias up='sudo softwareupdate -i -a && brew update && brew upgrade &&  upgrade_oh_my_zsh && vim +BundleInstall! +qall! && clear'
alias work='ssh kettnerp1@uoi-uo-patrick-kettner.1071064617.members.btmm.icloud.com'
alias glog="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias t="nocorrect tmuxinator"
alias bunyip="bunyip -c ~/Dropbox/bunyipConf.js"
alias grunt="nocorrect grunt"
alias isup="nocorrect isup"
alias nave='nocorrect nave'
alias tmux='nocorrect tmux'
alias htop='nocorrect htop'
alias vimrc='vim $HOME/.vimrc'
alias rar='nocorrect rar'
alias brwe='brew'
alias e='exit'
alias b='brew'
alias s='spot'
alias v='vim'
alias g='git'

autoload -U compinit && {
# Default colors for listings.
zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==02=01}:${(s.:.)LS_COLORS}")'

# Separate directories from files.
zstyle ':completion:*' list-dirs-first true

}

#report cpu-/system-/user-time of commands running longer than 5 seconds
REPORTTIME=6

# enable tmuxinator
[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator ]]


hg_dirty() {
  hg status 2> /dev/null \
  | awk '$1 == "?" { print "?" } $1 != "?" { print "!" }' \
  | sort | uniq | head -c1
}

function hg_prompt_info {
hg prompt --angle-brackets "\
<on %{$fg[magenta]%}<branch>%{$reset_color%}>\
< at %{$fg[yellow]%}<tags|%{$reset_color%}, %{$fg[yellow]%}>%{$reset_color%} >\
%{$fg[cyan]%}<status|modified|unknown><update>%{$reset_color%}<
patches: <patches|join( â†’ )|pre_applied(%{$fg[yellow]%})|post_applied(%{$reset_color%})|pre_unapplied(%{$fg_bold[black]%})|post_unapplied(%{$reset_color%})>>" 2>/dev/null
}

# Load RVM into a shell session *as a function*
#[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Start a server in the current directory
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  python -m SimpleHTTPServer "$port"
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
  local text
  if [ -t 0 ]; then # argument
    text="$1"
  else # pipe
    text=$(cat)
  fi
  body=$(echo "$text" | sed -E 's|$|<br>|g')
  osascript >/dev/null <<EOF
tell application "Notes"
  tell account "iCloud"
    tell folder "Notes"
      make new note with properties {name:"$text", body:"$body"}
    end tell
  end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
  local text
  if [ -t 0 ]; then
    text="$1" # argument
  else
    text=$(cat) # pipe
  fi
  osascript >/dev/null <<EOF
tell application "Reminders"
  tell the default list
    make new reminder with properties {name:"$text"}
  end tell
end tell
EOF
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

source $ZSH/oh-my-zsh.sh
